/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace FraxPayCore {
  export type RecipientAndAmountStruct = {
    recipient: AddressLike;
    amount: BigNumberish;
  };

  export type RecipientAndAmountStructOutput = [
    recipient: string,
    amount: bigint
  ] & { recipient: string; amount: bigint };
}

export interface FraxPayCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "erc20Payment"
      | "nativePayment"
      | "splitERC20Payment"
      | "splitNativePayment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC20Payment"
      | "NativePayment"
      | "SplitERC20Payment"
      | "SplitNativePayment"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "erc20Payment",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nativePayment",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "splitERC20Payment",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      FraxPayCore.RecipientAndAmountStruct[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "splitNativePayment",
    values: [
      AddressLike,
      BigNumberish,
      FraxPayCore.RecipientAndAmountStruct[],
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "erc20Payment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitERC20Payment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitNativePayment",
    data: BytesLike
  ): Result;
}

export namespace ERC20PaymentEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    tokenAddress: AddressLike,
    transferAmount: BigNumberish,
    identifier: string
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    tokenAddress: string,
    transferAmount: bigint,
    identifier: string
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    tokenAddress: string;
    transferAmount: bigint;
    identifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativePaymentEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    transferAmount: BigNumberish,
    identifier: string
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    transferAmount: bigint,
    identifier: string
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    transferAmount: bigint;
    identifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SplitERC20PaymentEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    tokenAddress: AddressLike,
    transferAmount: BigNumberish,
    splitData: FraxPayCore.RecipientAndAmountStruct[],
    identifier: string
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    tokenAddress: string,
    transferAmount: bigint,
    splitData: FraxPayCore.RecipientAndAmountStructOutput[],
    identifier: string
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    tokenAddress: string;
    transferAmount: bigint;
    splitData: FraxPayCore.RecipientAndAmountStructOutput[];
    identifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SplitNativePaymentEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    transferAmount: BigNumberish,
    splitData: FraxPayCore.RecipientAndAmountStruct[],
    identifier: string
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    transferAmount: bigint,
    splitData: FraxPayCore.RecipientAndAmountStructOutput[],
    identifier: string
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    transferAmount: bigint;
    splitData: FraxPayCore.RecipientAndAmountStructOutput[];
    identifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FraxPayCore extends BaseContract {
  connect(runner?: ContractRunner | null): FraxPayCore;
  waitForDeployment(): Promise<this>;

  interface: FraxPayCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  erc20Payment: TypedContractMethod<
    [
      recipient: AddressLike,
      tokenAddress: AddressLike,
      amount: BigNumberish,
      identifier: string
    ],
    [void],
    "nonpayable"
  >;

  nativePayment: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, identifier: string],
    [void],
    "payable"
  >;

  splitERC20Payment: TypedContractMethod<
    [
      recipient: AddressLike,
      tokenAddress: AddressLike,
      amount: BigNumberish,
      splitData: FraxPayCore.RecipientAndAmountStruct[],
      identifier: string
    ],
    [void],
    "nonpayable"
  >;

  splitNativePayment: TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      splitData: FraxPayCore.RecipientAndAmountStruct[],
      identifier: string
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "erc20Payment"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      tokenAddress: AddressLike,
      amount: BigNumberish,
      identifier: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nativePayment"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, identifier: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "splitERC20Payment"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      tokenAddress: AddressLike,
      amount: BigNumberish,
      splitData: FraxPayCore.RecipientAndAmountStruct[],
      identifier: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "splitNativePayment"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      splitData: FraxPayCore.RecipientAndAmountStruct[],
      identifier: string
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "ERC20Payment"
  ): TypedContractEvent<
    ERC20PaymentEvent.InputTuple,
    ERC20PaymentEvent.OutputTuple,
    ERC20PaymentEvent.OutputObject
  >;
  getEvent(
    key: "NativePayment"
  ): TypedContractEvent<
    NativePaymentEvent.InputTuple,
    NativePaymentEvent.OutputTuple,
    NativePaymentEvent.OutputObject
  >;
  getEvent(
    key: "SplitERC20Payment"
  ): TypedContractEvent<
    SplitERC20PaymentEvent.InputTuple,
    SplitERC20PaymentEvent.OutputTuple,
    SplitERC20PaymentEvent.OutputObject
  >;
  getEvent(
    key: "SplitNativePayment"
  ): TypedContractEvent<
    SplitNativePaymentEvent.InputTuple,
    SplitNativePaymentEvent.OutputTuple,
    SplitNativePaymentEvent.OutputObject
  >;

  filters: {
    "ERC20Payment(address,address,address,uint256,string)": TypedContractEvent<
      ERC20PaymentEvent.InputTuple,
      ERC20PaymentEvent.OutputTuple,
      ERC20PaymentEvent.OutputObject
    >;
    ERC20Payment: TypedContractEvent<
      ERC20PaymentEvent.InputTuple,
      ERC20PaymentEvent.OutputTuple,
      ERC20PaymentEvent.OutputObject
    >;

    "NativePayment(address,address,uint256,string)": TypedContractEvent<
      NativePaymentEvent.InputTuple,
      NativePaymentEvent.OutputTuple,
      NativePaymentEvent.OutputObject
    >;
    NativePayment: TypedContractEvent<
      NativePaymentEvent.InputTuple,
      NativePaymentEvent.OutputTuple,
      NativePaymentEvent.OutputObject
    >;

    "SplitERC20Payment(address,address,address,uint256,tuple[],string)": TypedContractEvent<
      SplitERC20PaymentEvent.InputTuple,
      SplitERC20PaymentEvent.OutputTuple,
      SplitERC20PaymentEvent.OutputObject
    >;
    SplitERC20Payment: TypedContractEvent<
      SplitERC20PaymentEvent.InputTuple,
      SplitERC20PaymentEvent.OutputTuple,
      SplitERC20PaymentEvent.OutputObject
    >;

    "SplitNativePayment(address,address,uint256,tuple[],string)": TypedContractEvent<
      SplitNativePaymentEvent.InputTuple,
      SplitNativePaymentEvent.OutputTuple,
      SplitNativePaymentEvent.OutputObject
    >;
    SplitNativePayment: TypedContractEvent<
      SplitNativePaymentEvent.InputTuple,
      SplitNativePaymentEvent.OutputTuple,
      SplitNativePaymentEvent.OutputObject
    >;
  };
}
