/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface TonicTokenInterface extends utils.Interface {
  functions: {
    "AIRDROP_SUPPLY()": FunctionFragment;
    "MINING_SUPPLY()": FunctionFragment;
    "PROTOCOL_SUPPLY()": FunctionFragment;
    "STAKING_REWARD_SUPPLY()": FunctionFragment;
    "TEAM_SUPPLY()": FunctionFragment;
    "TOTAL_SUPPLY()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addLiquidityEnabled()": FunctionFragment;
    "addPair(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "canAddLiquidityBeforeLaunch(address)": FunctionFragment;
    "clearStuckEthBalance()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delPair(address)": FunctionFragment;
    "devTreasury()": FunctionFragment;
    "doSwapBack()": FunctionFragment;
    "feeDenominator()": FunctionFragment;
    "getMinterLength()": FunctionFragment;
    "getPair(uint256)": FunctionFragment;
    "getUnburnedSupply()": FunctionFragment;
    "govFee()": FunctionFragment;
    "inSwap()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initializePair()": FunctionFragment;
    "initialized()": FunctionFragment;
    "isFeeExempt(address)": FunctionFragment;
    "isPair(address)": FunctionFragment;
    "isUnderlyingExchangeLocked()": FunctionFragment;
    "jackpotTreasury()": FunctionFragment;
    "launchedAt()": FunctionFragment;
    "launchedAtTimestamp()": FunctionFragment;
    "lockUnderlyingExchange()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolTreasury()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueToken(address)": FunctionFragment;
    "setFeeReceivers(address,address,address)": FunctionFragment;
    "setIsFeeExempt(address,bool)": FunctionFragment;
    "setSwapBackSettings(bool)": FunctionFragment;
    "setUnderlyingExchange(address,address,address)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalFee()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Factory()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AIRDROP_SUPPLY"
      | "MINING_SUPPLY"
      | "PROTOCOL_SUPPLY"
      | "STAKING_REWARD_SUPPLY"
      | "TEAM_SUPPLY"
      | "TOTAL_SUPPLY"
      | "WETH"
      | "addLiquidityEnabled"
      | "addPair"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "canAddLiquidityBeforeLaunch"
      | "clearStuckEthBalance"
      | "decimals"
      | "decreaseAllowance"
      | "delPair"
      | "devTreasury"
      | "doSwapBack"
      | "feeDenominator"
      | "getMinterLength"
      | "getPair"
      | "getUnburnedSupply"
      | "govFee"
      | "inSwap"
      | "increaseAllowance"
      | "initializePair"
      | "initialized"
      | "isFeeExempt"
      | "isPair"
      | "isUnderlyingExchangeLocked"
      | "jackpotTreasury"
      | "launchedAt"
      | "launchedAtTimestamp"
      | "lockUnderlyingExchange"
      | "name"
      | "owner"
      | "protocolTreasury"
      | "renounceOwnership"
      | "rescueToken"
      | "setFeeReceivers"
      | "setIsFeeExempt"
      | "setSwapBackSettings"
      | "setUnderlyingExchange"
      | "swapEnabled"
      | "symbol"
      | "totalFee"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Factory"
      | "uniswapV2Router"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AIRDROP_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINING_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_REWARD_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEAM_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidityEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canAddLiquidityBeforeLaunch",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearStuckEthBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "delPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "devTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doSwapBack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinterLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnburnedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "govFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "inSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFeeExempt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnderlyingExchangeLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jackpotTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launchedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launchedAtTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockUnderlyingExchange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceivers",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsFeeExempt",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapBackSettings",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderlyingExchange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AIRDROP_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINING_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_REWARD_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEAM_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canAddLiquidityBeforeLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearStuckEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doSwapBack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinterLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnburnedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "govFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUnderlyingExchangeLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jackpotTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "launchedAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "launchedAtTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockUnderlyingExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapBackSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnderlyingExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity(uint256,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapBack(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Trade(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapBack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AddLiquidityEventObject {
  tokenAmount: BigNumber;
  ethAmount: BigNumber;
  timestamp: BigNumber;
}
export type AddLiquidityEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SwapBackEventObject {
  burn: BigNumber;
  gov: BigNumber;
  liquidity: BigNumber;
  jackpot: BigNumber;
  dev: BigNumber;
  timestamp: BigNumber;
}
export type SwapBackEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  SwapBackEventObject
>;

export type SwapBackEventFilter = TypedEventFilter<SwapBackEvent>;

export interface TradeEventObject {
  user: string;
  pair: string;
  amount: BigNumber;
  side: BigNumber;
  circulatingSupply: BigNumber;
  timestamp: BigNumber;
}
export type TradeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  TradeEventObject
>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TonicToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TonicTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AIRDROP_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINING_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROTOCOL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKING_REWARD_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    TEAM_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    addLiquidityEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    addPair(
      pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canAddLiquidityBeforeLaunch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    clearStuckEthBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delPair(
      pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devTreasury(overrides?: CallOverrides): Promise<[string]>;

    doSwapBack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinterLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPair(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUnburnedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    govFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    inSwap(overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializePair(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isFeeExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPair(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUnderlyingExchangeLocked(overrides?: CallOverrides): Promise<[boolean]>;

    jackpotTreasury(overrides?: CallOverrides): Promise<[string]>;

    launchedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    launchedAtTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockUnderlyingExchange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolTreasury(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeReceivers(
      _protocolTreasury: PromiseOrValue<string>,
      _jackpotTreasury: PromiseOrValue<string>,
      _devTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsFeeExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapBackSettings(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUnderlyingExchange(
      _uniswapV2Router: PromiseOrValue<string>,
      _uniswapV2Factory: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;
  };

  AIRDROP_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MINING_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  PROTOCOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  STAKING_REWARD_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  TEAM_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  addLiquidityEnabled(overrides?: CallOverrides): Promise<boolean>;

  addPair(
    pair: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canAddLiquidityBeforeLaunch(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  clearStuckEthBalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delPair(
    pair: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devTreasury(overrides?: CallOverrides): Promise<string>;

  doSwapBack(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  getMinterLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPair(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUnburnedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  govFee(overrides?: CallOverrides): Promise<BigNumber>;

  inSwap(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializePair(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isFeeExempt(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPair(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUnderlyingExchangeLocked(overrides?: CallOverrides): Promise<boolean>;

  jackpotTreasury(overrides?: CallOverrides): Promise<string>;

  launchedAt(overrides?: CallOverrides): Promise<BigNumber>;

  launchedAtTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  lockUnderlyingExchange(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolTreasury(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueToken(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeReceivers(
    _protocolTreasury: PromiseOrValue<string>,
    _jackpotTreasury: PromiseOrValue<string>,
    _devTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsFeeExempt(
    holder: PromiseOrValue<string>,
    exempt: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapBackSettings(
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUnderlyingExchange(
    _uniswapV2Router: PromiseOrValue<string>,
    _uniswapV2Factory: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Factory(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    AIRDROP_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MINING_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_REWARD_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    TEAM_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    addLiquidityEnabled(overrides?: CallOverrides): Promise<boolean>;

    addPair(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    canAddLiquidityBeforeLaunch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    clearStuckEthBalance(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delPair(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    devTreasury(overrides?: CallOverrides): Promise<string>;

    doSwapBack(overrides?: CallOverrides): Promise<void>;

    feeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getMinterLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUnburnedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    govFee(overrides?: CallOverrides): Promise<BigNumber>;

    inSwap(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializePair(overrides?: CallOverrides): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isFeeExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPair(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUnderlyingExchangeLocked(overrides?: CallOverrides): Promise<boolean>;

    jackpotTreasury(overrides?: CallOverrides): Promise<string>;

    launchedAt(overrides?: CallOverrides): Promise<BigNumber>;

    launchedAtTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lockUnderlyingExchange(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolTreasury(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeReceivers(
      _protocolTreasury: PromiseOrValue<string>,
      _jackpotTreasury: PromiseOrValue<string>,
      _devTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsFeeExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapBackSettings(
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnderlyingExchange(
      _uniswapV2Router: PromiseOrValue<string>,
      _uniswapV2Factory: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddLiquidity(uint256,uint256,uint256)"(
      tokenAmount?: null,
      ethAmount?: null,
      timestamp?: null
    ): AddLiquidityEventFilter;
    AddLiquidity(
      tokenAmount?: null,
      ethAmount?: null,
      timestamp?: null
    ): AddLiquidityEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SwapBack(uint256,uint256,uint256,uint256,uint256,uint256)"(
      burn?: null,
      gov?: null,
      liquidity?: null,
      jackpot?: null,
      dev?: null,
      timestamp?: null
    ): SwapBackEventFilter;
    SwapBack(
      burn?: null,
      gov?: null,
      liquidity?: null,
      jackpot?: null,
      dev?: null,
      timestamp?: null
    ): SwapBackEventFilter;

    "Trade(address,address,uint256,uint256,uint256,uint256)"(
      user?: null,
      pair?: null,
      amount?: null,
      side?: null,
      circulatingSupply?: null,
      timestamp?: null
    ): TradeEventFilter;
    Trade(
      user?: null,
      pair?: null,
      amount?: null,
      side?: null,
      circulatingSupply?: null,
      timestamp?: null
    ): TradeEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    AIRDROP_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MINING_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_REWARD_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    TEAM_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    addPair(
      pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canAddLiquidityBeforeLaunch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearStuckEthBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delPair(
      pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    doSwapBack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getMinterLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnburnedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    govFee(overrides?: CallOverrides): Promise<BigNumber>;

    inSwap(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializePair(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isFeeExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPair(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnderlyingExchangeLocked(overrides?: CallOverrides): Promise<BigNumber>;

    jackpotTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    launchedAt(overrides?: CallOverrides): Promise<BigNumber>;

    launchedAtTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lockUnderlyingExchange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeReceivers(
      _protocolTreasury: PromiseOrValue<string>,
      _jackpotTreasury: PromiseOrValue<string>,
      _devTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsFeeExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapBackSettings(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUnderlyingExchange(
      _uniswapV2Router: PromiseOrValue<string>,
      _uniswapV2Factory: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AIRDROP_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINING_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKING_REWARD_SUPPLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TEAM_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidityEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPair(
      pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canAddLiquidityBeforeLaunch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearStuckEthBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delPair(
      pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doSwapBack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinterLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPair(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnburnedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializePair(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFeeExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPair(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUnderlyingExchangeLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jackpotTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launchedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launchedAtTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockUnderlyingExchange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueToken(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReceivers(
      _protocolTreasury: PromiseOrValue<string>,
      _jackpotTreasury: PromiseOrValue<string>,
      _devTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsFeeExempt(
      holder: PromiseOrValue<string>,
      exempt: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapBackSettings(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUnderlyingExchange(
      _uniswapV2Router: PromiseOrValue<string>,
      _uniswapV2Factory: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
